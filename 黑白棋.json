[
  {
    "type" : "game",
    "html" : "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n  <title>黑白棋<\/title>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n      touch-action: manipulation;\n      user-select: none;\n    }\n    \n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      background: linear-gradient(135deg, #1a2a6c, #b21f1f, #1a2a6c);\n      min-height: 100vh;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      color: white;\n      overflow-x: hidden;\n      position: relative;\n      padding: 10px;\n    }\n    \n    .game-container {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 15px;\n      position: relative;\n      z-index: 10;\n      width: 100%;\n      max-width: 450px;\n    }\n    \n    .score-section {\n      display: flex;\n      gap: 20px;\n      align-items: center;\n      margin-bottom: 10px;\n      flex-wrap: wrap;\n      justify-content: center;\n      width: 100%;\n    }\n    \n    .score-box {\n      background: rgba(0, 0, 0, 0.6);\n      border-radius: 15px;\n      padding: 12px 15px;\n      text-align: center;\n      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);\n      min-width: 125px;\n      flex: 1;\n    }\n    \n    .score-title {\n      font-size: 12px;\n      color: #a0a0a0;\n      margin-bottom: 6px;\n      text-transform: uppercase;\n      letter-spacing: 1px;\n    }\n    \n    .score-value {\n      font-size: 24px;\n      font-weight: bold;\n      color: #fff;\n    }\n    \n    .current-player {\n      background: rgba(0, 0, 0, 0.6);\n      border-radius: 15px;\n      padding: 12px 15px;\n      text-align: center;\n      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 6px;\n      min-width: 125px;\n      flex: 1;\n    }\n    \n    .player-indicator {\n      width: 20px;\n      height: 20px;\n      border-radius: 50%;\n      border: 2px solid #fff;\n    }\n    \n    .player-black { background: #333; }\n    .player-white { background: #fff; }\n    \n    .player-text {\n      font-size: 12px;\n      color: #a0a0a0;\n      text-transform: uppercase;\n      letter-spacing: 1px;\n    }\n    \n    .game-board {\n      background: rgba(0, 0, 0, 0.6);\n      border-radius: 15px;\n      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);\n      padding: 15px;\n      position: relative;\n      width: 100%;\n      max-width: 420px;\n    }\n    \n    #reversiBoard {\n      width: 100%;\n      aspect-ratio: 1;\n      background: rgba(34, 139, 34, 0.8);\n      border-radius: 8px;\n      position: relative;\n      display: grid;\n      grid-template-columns: repeat(8, 1fr);\n      grid-template-rows: repeat(8, 1fr);\n      gap: 1px;\n      padding: 8px;\n      max-width: 390px;\n      margin: 0 auto;\n    }\n    \n    .grid-cell {\n      background: rgba(34, 139, 34, 0.9);\n      border-radius: 3px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      cursor: pointer;\n      transition: all 0.2s ease-in-out;\n      position: relative;\n      aspect-ratio: 1;\n    }\n    \n    .grid-cell:hover {\n      background: rgba(34, 139, 34, 0.7);\n    }\n    \n    .grid-cell.valid-move {\n      background: rgba(255, 255, 0, 0.3);\n      box-shadow: inset 0 0 10px rgba(255, 255, 0, 0.5);\n    }\n    \n    .piece {\n      width: 85%;\n      height: 85%;\n      border-radius: 50%;\n      transition: all 0.3s ease-in-out;\n      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\n      position: relative;\n    }\n    \n    .piece.black {\n      background: radial-gradient(circle at 30% 30%, #555, #111);\n      border: 1px solid #000;\n    }\n    \n    .piece.white {\n      background: radial-gradient(circle at 30% 30%, #fff, #ddd);\n      border: 1px solid #ccc;\n    }\n    \n    .piece.new {\n      animation: placePiece 0.4s ease-out;\n    }\n    \n    .piece.flip {\n      animation: flipPiece 0.6s ease-in-out;\n    }\n    \n    @keyframes placePiece {\n      0% {\n        opacity: 0;\n        transform: scale(0) rotate(180deg);\n      }\n      50% {\n        transform: scale(1.2) rotate(90deg);\n      }\n      100% {\n        opacity: 1;\n        transform: scale(1) rotate(0deg);\n      }\n    }\n    \n    @keyframes flipPiece {\n      0% { transform: rotateY(0deg); }\n      50% { transform: rotateY(90deg); }\n      100% { transform: rotateY(0deg); }\n    }\n    \n    .controls {\n      display: flex;\n      gap: 15px;\n      flex-wrap: wrap;\n      justify-content: center;\n      align-items: center;\n      margin-bottom: 15px;\n      width: 100%;\n    }\n    \n    .difficulty-selector {\n      background: rgba(0, 0, 0, 0.6);\n      border-radius: 15px;\n      padding: 8px;\n      display: flex;\n      gap: 5px;\n      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);\n    }\n    \n    .difficulty-btn {\n      padding: 8px 16px;\n      background: rgba(255, 255, 255, 0.1);\n      border: 1px solid rgba(255, 255, 255, 0.2);\n      border-radius: 10px;\n      font-size: 14px;\n      color: white;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      text-align: center;\n      min-width: 60px;\n    }\n    \n    .difficulty-btn:hover {\n      background: rgba(255, 255, 255, 0.2);\n      transform: translateY(-1px);\n    }\n    \n    .difficulty-btn.active {\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      border-color: #667eea;\n      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);\n    }\n    \n    .new-game-btn {\n      padding: 12px 30px;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      border-radius: 25px;\n      font-size: 16px;\n      font-weight: bold;\n      color: white;\n      text-align: center;\n      box-shadow: \n        0 8px 25px rgba(102, 126, 234, 0.4),\n        inset 0 2px 4px rgba(255, 255, 255, 0.2);\n      transition: all 0.3s ease;\n      border: none;\n      cursor: pointer;\n      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n      position: relative;\n      overflow: hidden;\n      text-transform: uppercase;\n      letter-spacing: 1px;\n      min-width: 120px;\n    }\n    \n    .new-game-btn::before {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: -100%;\n      width: 100%;\n      height: 100%;\n      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n      transition: left 0.5s;\n    }\n    \n    .new-game-btn:hover {\n      transform: translateY(-2px);\n      box-shadow: \n        0 12px 35px rgba(102, 126, 234, 0.6),\n        inset 0 2px 4px rgba(255, 255, 255, 0.3);\n    }\n    \n    .new-game-btn:hover::before {\n      left: 100%;\n    }\n    \n    .new-game-btn:active {\n      transform: translateY(-1px) scale(0.98);\n    }\n    \n    .game-over {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.85);\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      z-index: 20;\n      display: none;\n      padding: 20px;\n    }\n    \n    .game-over h2 {\n      font-size: 36px;\n      margin-bottom: 20px;\n      text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);\n      text-align: center;\n    }\n    \n    .game-over.black-wins h2 { color: #333; text-shadow: 0 0 10px rgba(0, 0, 0, 0.8); }\n    .game-over.white-wins h2 { color: #fff; text-shadow: 0 0 10px rgba(255, 255, 255, 0.8); }\n    .game-over.tie h2 { color: #ffd700; text-shadow: 0 0 10px rgba(255, 215, 0, 0.8); }\n    \n    .final-score {\n      font-size: 24px;\n      margin-bottom: 30px;\n      text-align: center;\n    }\n    \n    .restart-btn {\n      padding: 15px 40px;\n      background: linear-gradient(to right, #ff416c, #ff4b2b);\n      border-radius: 30px;\n      font-size: 20px;\n      font-weight: bold;\n      color: white;\n      box-shadow: 0 8px 25px rgba(255, 75, 43, 0.4);\n      border: none;\n      cursor: pointer;\n      transition: all 0.3s ease;\n    }\n    \n    .restart-btn:hover {\n      transform: translateY(-2px);\n      box-shadow: 0 12px 35px rgba(255, 75, 43, 0.6);\n    }\n    \n    .thinking {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: rgba(0, 0, 0, 0.8);\n      color: white;\n      padding: 15px 25px;\n      border-radius: 10px;\n      font-size: 16px;\n      z-index: 15;\n      display: none;\n    }\n    \n    .confirm-dialog {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.85);\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      z-index: 25;\n      display: none;\n      padding: 20px;\n    }\n    \n    .confirm-content {\n      background: rgba(0, 0, 0, 0.9);\n      border-radius: 15px;\n      padding: 30px;\n      text-align: center;\n      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);\n      max-width: 400px;\n      width: 100%;\n    }\n    \n    .confirm-title {\n      font-size: 24px;\n      margin-bottom: 15px;\n      color: #fff;\n    }\n    \n    .confirm-message {\n      font-size: 16px;\n      margin-bottom: 25px;\n      color: #a0a0a0;\n      line-height: 1.5;\n    }\n    \n    .confirm-buttons {\n      display: flex;\n      gap: 15px;\n      justify-content: center;\n    }\n    \n    .confirm-btn, .cancel-btn {\n      padding: 12px 25px;\n      border-radius: 25px;\n      font-size: 16px;\n      font-weight: bold;\n      color: white;\n      border: none;\n      cursor: pointer;\n      transition: all 0.3s ease;\n      min-width: 100px;\n    }\n    \n    .confirm-btn {\n      background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);\n      box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);\n    }\n    \n    .cancel-btn {\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);\n    }\n    \n    .confirm-btn:hover {\n      transform: translateY(-2px);\n      box-shadow: 0 12px 35px rgba(255, 107, 107, 0.6);\n    }\n    \n    .cancel-btn:hover {\n      transform: translateY(-2px);\n      box-shadow: 0 12px 35px rgba(102, 126, 234, 0.6);\n    }\n    \n    \/* 背景动画 *\/\n    .background {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      overflow: hidden;\n      z-index: 1;\n    }\n    \n    .shape {\n      position: absolute;\n      background: rgba(255, 255, 255, 0.03);\n      border: 1px solid rgba(255, 255, 255, 0.05);\n      border-radius: 10px;\n      animation: float 15s infinite linear;\n    }\n    \n    @keyframes float {\n      0% {\n        transform: translateY(0) rotate(0deg);\n      }\n      100% {\n        transform: translateY(-100vh) rotate(360deg);\n      }\n    }\n    \n    \/* 移动端适配 *\/\n    @media (max-width: 480px) {\n      .game-container {\n        gap: 10px;\n        padding: 5px;\n      }\n      \n      .score-section {\n        gap: 10px;\n      }\n      \n      .score-box, .current-player {\n        padding: 8px 10px;\n        min-width: 125px;\n      }\n      \n      .score-title, .player-text {\n        font-size: 10px;\n      }\n      \n      .score-value {\n        font-size: 20px;\n      }\n      \n      .game-board {\n        padding: 10px;\n      }\n      \n      #reversiBoard {\n        padding: 6px;\n      }\n      \n      .controls {\n        gap: 10px;\n        margin-bottom: 10px;\n      }\n      \n      .difficulty-selector {\n        padding: 6px;\n        gap: 3px;\n      }\n      \n      .difficulty-btn {\n        padding: 6px 12px;\n        font-size: 12px;\n        min-width: 50px;\n      }\n      \n      .new-game-btn {\n        padding: 10px 20px;\n        font-size: 14px;\n        min-width: 100px;\n      }\n      \n      .game-over h2 {\n        font-size: 28px;\n      }\n      \n      .final-score {\n        font-size: 20px;\n      }\n      \n      .confirm-content {\n        padding: 20px;\n      }\n      \n      .confirm-title {\n        font-size: 20px;\n      }\n      \n      .confirm-message {\n        font-size: 14px;\n      }\n      \n      .confirm-btn, .cancel-btn {\n        padding: 10px 20px;\n        font-size: 14px;\n        min-width: 80px;\n      }\n    }\n  <\/style>\n<\/head>\n<body>\n  <div class=\"background\" id=\"background\"><\/div>\n  \n  <div class=\"game-container\">\n    <!-- 控制按钮区域 -->\n    <div class=\"controls\">\n      <div class=\"difficulty-selector\">\n        <button class=\"difficulty-btn\" data-difficulty=\"1\">简单<\/button>\n        <button class=\"difficulty-btn\" data-difficulty=\"2\">中等<\/button>\n        <button class=\"difficulty-btn active\" data-difficulty=\"3\">困难<\/button>\n      <\/div>\n      <button class=\"new-game-btn\" id=\"newGameBtn\">新游戏<\/button>\n    <\/div>\n    \n    <!-- 分数和当前玩家区域 -->\n    <div class=\"score-section\">\n      <div class=\"score-box\">\n        <div class=\"score-title\">黑棋<\/div>\n        <div class=\"score-value\" id=\"blackScore\">2<\/div>\n      <\/div>\n      \n      <div class=\"current-player\" id=\"currentPlayer\">\n        <div class=\"player-indicator player-black\" id=\"playerIndicator\"><\/div>\n        <div class=\"player-text\" id=\"playerText\">黑棋回合<\/div>\n      <\/div>\n      \n      <div class=\"score-box\">\n        <div class=\"score-title\">白棋<\/div>\n        <div class=\"score-value\" id=\"whiteScore\">2<\/div>\n      <\/div>\n    <\/div>\n    \n    <!-- 游戏面板 -->\n    <div class=\"game-board\">\n      <div id=\"reversiBoard\"><\/div>\n    <\/div>\n  <\/div>\n  \n  <div class=\"thinking\" id=\"thinking\">AI思考中...<\/div>\n  \n  <div class=\"confirm-dialog\" id=\"confirmDialog\">\n    <div class=\"confirm-content\">\n      <div class=\"confirm-title\">确认新游戏<\/div>\n      <div class=\"confirm-message\">当前游戏正在进行中，开始新游戏将丢失当前进度。确定要开始新游戏吗？<\/div>\n      <div class=\"confirm-buttons\">\n        <button class=\"cancel-btn\" id=\"cancelBtn\">取消<\/button>\n        <button class=\"confirm-btn\" id=\"confirmBtn\">确定<\/button>\n      <\/div>\n    <\/div>\n  <\/div>\n  \n  <div class=\"game-over\" id=\"gameOver\">\n    <h2 id=\"gameResult\">游戏结束!<\/h2>\n    <div class=\"final-score\" id=\"finalScore\">黑棋: 0 - 白棋: 0<\/div>\n    <button class=\"restart-btn\" id=\"restartBtn\">重新开始<\/button>\n  <\/div>\n\n  <script>\n    \/\/ 游戏状态\n    let board = [];\n    let currentPlayer = 1; \/\/ 1 = 黑棋 (玩家), -1 = 白棋 (AI)\n    let gameEnded = false;\n    let difficulty = 3; \/\/ 默认困难模式\n    let isAIThinking = false;\n    let gameStarted = false; \/\/ 游戏是否已开始\n    \n    \/\/ 方向数组 (8个方向)\n    const directions = [\n      [-1, -1], [-1, 0], [-1, 1],\n      [0, -1],           [0, 1],\n      [1, -1],  [1, 0],  [1, 1]\n    ];\n    \n    \/\/ 初始化游戏\n    function init() {\n      createBackground();\n      setupEventListeners();\n      newGame();\n    }\n    \n    \/\/ 创建动态背景\n    function createBackground() {\n      const bg = document.getElementById('background');\n      const colors = ['rgba(255,255,255,0.05)', 'rgba(255,255,255,0.03)', 'rgba(255,255,255,0.02)'];\n      \n      for (let i = 0; i < 15; i++) {\n        const shape = document.createElement('div');\n        shape.classList.add('shape');\n        \n        const size = Math.random() * 80 + 40;\n        shape.style.width = `${size}px`;\n        shape.style.height = `${size}px`;\n        shape.style.left = `${Math.random() * 100}%`;\n        shape.style.top = `${Math.random() * 100}%`;\n        shape.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];\n        shape.style.animationDuration = `${Math.random() * 25 + 20}s`;\n        shape.style.animationDelay = `${Math.random() * 5}s`;\n        \n        bg.appendChild(shape);\n      }\n    }\n    \n    \/\/ 设置事件监听器\n    function setupEventListeners() {\n      document.getElementById('newGameBtn').addEventListener('click', showNewGameConfirm);\n      document.getElementById('restartBtn').addEventListener('click', () => startNewGame());\n      document.getElementById('confirmBtn').addEventListener('click', () => {\n        hideConfirmDialog();\n        startNewGame();\n      });\n      document.getElementById('cancelBtn').addEventListener('click', hideConfirmDialog);\n      \n      \/\/ 难度选择按钮事件\n      document.querySelectorAll('.difficulty-btn').forEach(btn => {\n        btn.addEventListener('click', (e) => {\n          const newDifficulty = parseInt(e.target.dataset.difficulty);\n          setDifficulty(newDifficulty);\n        });\n      });\n    }\n    \n    \/\/ 显示新游戏确认对话框\n    function showNewGameConfirm() {\n      if (gameStarted && !gameEnded) {\n        document.getElementById('confirmDialog').style.display = 'flex';\n      } else {\n        startNewGame();\n      }\n    }\n    \n    \/\/ 隐藏确认对话框\n    function hideConfirmDialog() {\n      document.getElementById('confirmDialog').style.display = 'none';\n    }\n    \n    \/\/ 设置难度\n    function setDifficulty(level) {\n      difficulty = level;\n      \n      \/\/ 更新按钮状态\n      document.querySelectorAll('.difficulty-btn').forEach(btn => {\n        btn.classList.remove('active');\n        if (parseInt(btn.dataset.difficulty) === level) {\n          btn.classList.add('active');\n        }\n      });\n    }\n    \n    \/\/ 开始新游戏\n    function startNewGame() {\n      newGame();\n    }\n    \n    \/\/ 新游戏\n    function newGame() {\n      \/\/ 初始化棋盘\n      board = Array(8).fill().map(() => Array(8).fill(0));\n      \n      \/\/ 设置初始棋子\n      board[3][3] = -1; \/\/ 白棋\n      board[3][4] = 1;  \/\/ 黑棋\n      board[4][3] = 1;  \/\/ 黑棋\n      board[4][4] = -1; \/\/ 白棋\n      \n      currentPlayer = 1; \/\/ 黑棋先手\n      gameEnded = false;\n      isAIThinking = false;\n      gameStarted = true;\n      \n      document.getElementById('gameOver').style.display = 'none';\n      document.getElementById('thinking').style.display = 'none';\n      document.getElementById('confirmDialog').style.display = 'none';\n      \n      createBoard();\n      updateBoard(); \n      updateDisplay();\n      highlightValidMoves();\n    }\n    \n    \/\/ 创建棋盘\n    function createBoard() {\n      const boardElement = document.getElementById('reversiBoard');\n      boardElement.innerHTML = '';\n      \n      for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n          const cell = document.createElement('div');\n          cell.className = 'grid-cell';\n          cell.dataset.row = i;\n          cell.dataset.col = j;\n          cell.addEventListener('click', () => handleCellClick(i, j));\n          boardElement.appendChild(cell);\n        }\n      }\n    }\n    \n    \/\/ 处理格子点击\n    function handleCellClick(row, col) {\n      if (gameEnded || isAIThinking || currentPlayer !== 1) return;\n      \n      if (isValidMove(row, col, currentPlayer)) {\n        makeMove(row, col, currentPlayer);\n        \n        if (!gameEnded) {\n          \/\/ 检查下一个玩家是否有可下的位置\n          checkAndSwitchPlayer();\n        }\n      }\n    }\n    \n    \/\/ 检查并切换玩家\n    function checkAndSwitchPlayer() {\n      currentPlayer = -currentPlayer;\n      updateDisplay();\n      \n      const currentPlayerMoves = getValidMoves(currentPlayer);\n      \n      if (currentPlayerMoves.length === 0) {\n        \/\/ 当前玩家无法移动，检查对手是否也无法移动\n        const opponentMoves = getValidMoves(-currentPlayer);\n        \n        if (opponentMoves.length === 0) {\n          \/\/ 双方都无法移动，游戏结束\n          endGame();\n          return;\n        } else {\n          \/\/ 只有当前玩家无法移动，跳过回合\n          setTimeout(() => {\n            currentPlayer = -currentPlayer;\n            updateDisplay();\n            \n            if (currentPlayer === 1) {\n              highlightValidMoves();\n            } else {\n              aiMove();\n            }\n          }, 1000);\n          return;\n        }\n      }\n      \n      \/\/ 当前玩家有可下的位置\n      if (currentPlayer === -1) {\n        setTimeout(() => {\n          aiMove();\n        }, 500);\n      } else {\n        highlightValidMoves();\n      }\n    }\n    \n    \/\/ 执行移动\n    function makeMove(row, col, player) {\n      if (!isValidMove(row, col, player)) return false;\n      \n      \/\/ 放置棋子\n      board[row][col] = player;\n      \n      \/\/ 翻转棋子\n      const flippedPieces = [];\n      for (const [dx, dy] of directions) {\n        const pieces = getFlippablePieces(row, col, dx, dy, player);\n        flippedPieces.push(...pieces);\n      }\n      \n      \/\/ 执行翻转\n      for (const [r, c] of flippedPieces) {\n        board[r][c] = player;\n      }\n      \n      updateBoard();\n      return true;\n    }\n    \n    \/\/ 检查是否为有效移动\n    function isValidMove(row, col, player) {\n      if (board[row][col] !== 0) return false;\n      \n      for (const [dx, dy] of directions) {\n        if (getFlippablePieces(row, col, dx, dy, player).length > 0) {\n          return true;\n        }\n      }\n      return false;\n    }\n    \n    \/\/ 获取可翻转的棋子\n    function getFlippablePieces(row, col, dx, dy, player) {\n      const pieces = [];\n      let x = row + dx;\n      let y = col + dy;\n      \n      while (x >= 0 && x < 8 && y >= 0 && y < 8) {\n        if (board[x][y] === 0) break;\n        if (board[x][y] === player) {\n          return pieces;\n        }\n        pieces.push([x, y]);\n        x += dx;\n        y += dy;\n      }\n      \n      return [];\n    }\n    \n    \/\/ 获取所有有效移动\n    function getValidMoves(player) {\n      const moves = [];\n      for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n          if (isValidMove(i, j, player)) {\n            moves.push([i, j]);\n          }\n        }\n      }\n      return moves;\n    }\n    \n    \/\/ 高亮显示有效移动\n    function highlightValidMoves() {\n      const cells = document.querySelectorAll('.grid-cell');\n      cells.forEach(cell => {\n        cell.classList.remove('valid-move');\n        const row = parseInt(cell.dataset.row);\n        const col = parseInt(cell.dataset.col);\n        if (currentPlayer === 1 && isValidMove(row, col, currentPlayer)) {\n          cell.classList.add('valid-move');\n        }\n      });\n    }\n    \n    \/\/ AI移动\n    function aiMove() {\n      if (gameEnded || currentPlayer !== -1) return;\n      \n      isAIThinking = true;\n      document.getElementById('thinking').style.display = 'block';\n      \n      setTimeout(() => {\n        const validMoves = getValidMoves(currentPlayer);\n        \n        if (validMoves.length === 0) {\n          \/\/ AI无法移动，这种情况应该在 checkAndSwitchPlayer 中处理\n          isAIThinking = false;\n          document.getElementById('thinking').style.display = 'none';\n          return;\n        }\n        \n        let bestMove;\n        \n        if (difficulty === 1) {\n          \/\/ 简单模式：随机选择\n          bestMove = validMoves[Math.floor(Math.random() * validMoves.length)];\n        } else if (difficulty === 2) {\n          \/\/ 中等模式：使用较浅的搜索深度\n          bestMove = getMinimaxMove(validMoves, 2);\n        } else {\n          \/\/ 困难模式：使用较深的搜索深度\n          bestMove = getMinimaxMove(validMoves, 4);\n        }\n        \n        if (bestMove) {\n          makeMove(bestMove[0], bestMove[1], currentPlayer);\n          \n          if (!gameEnded) {\n            checkAndSwitchPlayer();\n          }\n        }\n        \n        isAIThinking = false;\n        document.getElementById('thinking').style.display = 'none';\n      }, 1000);\n    }\n    \n    \/\/ Minimax算法 (困难难度)\n    function getMinimaxMove(validMoves, depth) {\n      let bestMove = null;\n      let bestScore = -Infinity;\n      \n      for (const [row, col] of validMoves) {\n        const newBoard = copyBoard();\n        simulateMove(newBoard, row, col, currentPlayer);\n        const score = minimax(newBoard, depth - 1, false, -Infinity, Infinity);\n        \n        if (score > bestScore) {\n          bestScore = score;\n          bestMove = [row, col];\n        }\n      }\n      \n      return bestMove;\n    }\n    \n    \/\/ Minimax算法实现\n    function minimax(board, depth, isMaximizing, alpha, beta) {\n      if (depth === 0 || isGameOverBoard(board)) {\n        return evaluateBoard(board);\n      }\n      \n      const player = isMaximizing ? -1 : 1;\n      const validMoves = getValidMovesBoard(board, player);\n      \n      if (validMoves.length === 0) {\n        return minimax(board, depth - 1, !isMaximizing, alpha, beta);\n      }\n      \n      if (isMaximizing) {\n        let maxEval = -Infinity;\n        for (const [row, col] of validMoves) {\n          const newBoard = copyBoardFrom(board);\n          simulateMove(newBoard, row, col, player);\n          const eval = minimax(newBoard, depth - 1, false, alpha, beta);\n          maxEval = Math.max(maxEval, eval);\n          alpha = Math.max(alpha, eval);\n          if (beta <= alpha) break;\n        }\n        return maxEval;\n      } else {\n        let minEval = Infinity;\n        for (const [row, col] of validMoves) {\n          const newBoard = copyBoardFrom(board);\n          simulateMove(newBoard, row, col, player);\n          const eval = minimax(newBoard, depth - 1, true, alpha, beta);\n          minEval = Math.min(minEval, eval);\n          beta = Math.min(beta, eval);\n          if (beta <= alpha) break;\n        }\n        return minEval;\n      }\n    }\n    \n    \/\/ 评估棋盘\n    function evaluateBoard(board) {\n      let score = 0;\n      \n      \/\/ 棋子数量\n      let aiPieces = 0;\n      let playerPieces = 0;\n      \n      \/\/ 位置权重\n      const weights = [\n        [100, -20, 10, 5, 5, 10, -20, 100],\n        [-20, -50, -2, -2, -2, -2, -50, -20],\n        [10, -2, -1, -1, -1, -1, -2, 10],\n        [5, -2, -1, -1, -1, -1, -2, 5],\n        [5, -2, -1, -1, -1, -1, -2, 5],\n        [10, -2, -1, -1, -1, -1, -2, 10],\n        [-20, -50, -2, -2, -2, -2, -50, -20],\n        [100, -20, 10, 5, 5, 10, -20, 100]\n      ];\n      \n      for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n          if (board[i][j] === -1) {\n            aiPieces++;\n            score += weights[i][j];\n          } else if (board[i][j] === 1) {\n            playerPieces++;\n            score -= weights[i][j];\n          }\n        }\n      }\n      \n      \/\/ 移动性\n      const aiMoves = getValidMovesBoard(board, -1).length;\n      const playerMoves = getValidMovesBoard(board, 1).length;\n      score += (aiMoves - playerMoves) * 10;\n      \n      return score;\n    }\n    \n    \/\/ 辅助函数\n    function copyBoard() {\n      return board.map(row => [...row]);\n    }\n    \n    function copyBoardFrom(sourceBoard) {\n      return sourceBoard.map(row => [...row]);\n    }\n    \n    function simulateMove(board, row, col, player) {\n      board[row][col] = player;\n      \n      for (const [dx, dy] of directions) {\n        const pieces = getFlippablePiecesBoard(board, row, col, dx, dy, player);\n        for (const [r, c] of pieces) {\n          board[r][c] = player;\n        }\n      }\n    }\n    \n    function getFlippablePiecesBoard(board, row, col, dx, dy, player) {\n      const pieces = [];\n      let x = row + dx;\n      let y = col + dy;\n      \n      while (x >= 0 && x < 8 && y >= 0 && y < 8) {\n        if (board[x][y] === 0) break;\n        if (board[x][y] === player) {\n          return pieces;\n        }\n        pieces.push([x, y]);\n        x += dx;\n        y += dy;\n      }\n      \n      return [];\n    }\n    \n    function getValidMovesBoard(board, player) {\n      const moves = [];\n      for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n          if (board[i][j] === 0) {\n            for (const [dx, dy] of directions) {\n              if (getFlippablePiecesBoard(board, i, j, dx, dy, player).length > 0) {\n                moves.push([i, j]);\n                break;\n              }\n            }\n          }\n        }\n      }\n      return moves;\n    }\n    \n    function isGameOverBoard(board) {\n      return getValidMovesBoard(board, 1).length === 0 && getValidMovesBoard(board, -1).length === 0;\n    }\n    \n    \/\/ 更新棋盘显示\n    function updateBoard() {\n      const cells = document.querySelectorAll('.grid-cell');\n      \n      cells.forEach((cell, index) => {\n        const row = Math.floor(index \/ 8);\n        const col = index % 8;\n        const piece = cell.querySelector('.piece');\n        \n        if (board[row][col] !== 0) {\n          if (!piece) {\n            const newPiece = document.createElement('div');\n            newPiece.className = `piece ${board[row][col] === 1 ? 'black' : 'white'} new`;\n            cell.appendChild(newPiece);\n          } else {\n            const shouldBeBlack = board[row][col] === 1;\n            const isCurrentlyBlack = piece.classList.contains('black');\n            \n            if (shouldBeBlack !== isCurrentlyBlack) {\n              piece.classList.add('flip');\n              setTimeout(() => {\n                piece.className = `piece ${shouldBeBlack ? 'black' : 'white'}`;\n              }, 300);\n            }\n          }\n        } else if (piece) {\n          piece.remove();\n        }\n      });\n    }\n    \n    \/\/ 更新显示\n    function updateDisplay() {\n      \/\/ 计算分数\n      let blackCount = 0;\n      let whiteCount = 0;\n      \n      for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n          if (board[i][j] === 1) blackCount++;\n          else if (board[i][j] === -1) whiteCount++;\n        }\n      }\n      \n      document.getElementById('blackScore').textContent = blackCount;\n      document.getElementById('whiteScore').textContent = whiteCount;\n      \n      \/\/ 更新当前玩家\n      const playerIndicator = document.getElementById('playerIndicator');\n      const playerText = document.getElementById('playerText');\n      \n      if (currentPlayer === 1) {\n        playerIndicator.className = 'player-indicator player-black';\n        playerText.textContent = '黑棋回合';\n      } else {\n        playerIndicator.className = 'player-indicator player-white';\n        playerText.textContent = 'AI回合';\n      }\n    }\n    \n    \/\/ 检查游戏是否结束\n    function isGameOver() {\n      const blackMoves = getValidMoves(1);\n      const whiteMoves = getValidMoves(-1);\n      return blackMoves.length === 0 && whiteMoves.length === 0;\n    }\n    \n    \/\/ 结束游戏\n    function endGame() {\n      gameEnded = true;\n      \n      let blackCount = 0;\n      let whiteCount = 0;\n      \n      for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++) {\n          if (board[i][j] === 1) blackCount++;\n          else if (board[i][j] === -1) whiteCount++;\n        }\n      }\n      \n      const gameOverElement = document.getElementById('gameOver');\n      const gameResult = document.getElementById('gameResult');\n      const finalScore = document.getElementById('finalScore');\n      \n      finalScore.textContent = `黑棋: ${blackCount} - 白棋: ${whiteCount}`;\n      \n      if (blackCount > whiteCount) {\n        gameResult.textContent = '恭喜！你赢了！';\n        gameOverElement.className = 'game-over black-wins';\n      } else if (whiteCount > blackCount) {\n        gameResult.textContent = 'AI获胜！';\n        gameOverElement.className = 'game-over white-wins';\n      } else {\n        gameResult.textContent = '平局！';\n        gameOverElement.className = 'game-over tie';\n      }\n      \n      gameOverElement.style.display = 'flex';\n    }\n    \n    \/\/ 页面加载完成后初始化\n    document.addEventListener('DOMContentLoaded', init);\n  <\/script>\n<\/body>\n<\/html>",
    "name" : "黑白棋",
    "desc" : "黑吃黑，白吃白",
    "icon" : "calendar",
    "createdAt" : "2025-08-03T09:21:02Z",
    "isPinned" : true,
    "color" : "teal",
    "id" : "4bbe8c6db35685cc",
    "updatedAt" : "2025-08-05T14:20:17Z",
    "version" : 1
  }
]