[
  {
    "icon" : "gamecontroller",
    "desc" : "经典贪食蛇小游戏，玩到停不下来！",
    "color" : "purple",
    "html" : "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n  <title>贪食蛇<\/title>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n      touch-action: manipulation;\n      user-select: none;\n    }\n    \n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      background: linear-gradient(135deg, #1a2a6c, #b21f1f, #1a2a6c);\n      height: 100vh;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      color: white;\n      overflow: hidden;\n      position: relative;\n    }\n    \n    .game-container {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 20px;\n      position: relative;\n      z-index: 10;\n    }\n    \n    .main-content {\n        padding-top: 5vh;\n        display: flex;\n        gap: 20px;\n        align-items: flex-start;\n    }\n    \n    .left-section {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n    \n    .game-board {\n      background: rgba(0, 0, 0, 0.6);\n      border-radius: 10px;\n      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);\n      overflow: hidden;\n      position: relative;\n    }\n    \n    #snake {\n      display: block;\n    }\n    \n    \/* 开始按钮覆盖层 *\/\n    .start-overlay {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.8);\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      z-index: 15;\n      border-radius: 10px;\n    }\n    \n    .start-overlay.hidden {\n      display: none;\n    }\n    \n    .start-btn {\n      padding: 20px 40px;\n      background: linear-gradient(to right, #50C878, #32CD32);\n      border-radius: 25px;\n      font-size: 24px;\n      font-weight: bold;\n      color: white;\n      text-align: center;\n      box-shadow: \n        0 8px 25px rgba(80, 200, 120, 0.4),\n        inset 0 2px 4px rgba(255, 255, 255, 0.2);\n      transition: all 0.2s ease;\n      border: none;\n      cursor: pointer;\n      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n    }\n    \n    .start-btn:hover {\n      transform: translateY(-2px);\n      box-shadow: \n        0 12px 30px rgba(80, 200, 120, 0.5),\n        inset 0 2px 4px rgba(255, 255, 255, 0.2);\n    }\n    \n    .start-btn:active {\n      transform: scale(0.95);\n      box-shadow: \n        0 4px 15px rgba(80, 200, 120, 0.3),\n        inset 0 1px 2px rgba(255, 255, 255, 0.1);\n    }\n    \n    .controls {\n      display: grid;\n      grid-template-columns: 70px 70px 70px;\n      grid-template-rows: 70px 70px 70px;\n      gap: 10px;\n      align-items: center;\n      justify-content: center;\n    }\n    \n    .control-btn {\n      width: 70px;\n      height: 70px;\n      background: rgba(255, 255, 255, 0.15);\n      border-radius: 20px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      font-size: 32px;\n      color: white;\n      box-shadow: \n        0 5px 15px rgba(0, 0, 0, 0.3),\n        inset 0 2px 4px rgba(255, 255, 255, 0.1);\n      transition: all 0.15s ease;\n      border: 1px solid rgba(255, 255, 255, 0.1);\n      backdrop-filter: blur(5px);\n      cursor: pointer;\n      \/* 移动设备触摸优化 *\/\n      -webkit-tap-highlight-color: transparent;\n      -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none;\n      \/* 防止双击缩放 *\/\n      touch-action: manipulation;\n    }\n    \n    \/* 悬停效果（主要用于桌面设备） *\/\n    .control-btn:hover {\n      background: rgba(255, 255, 255, 0.2);\n      transform: translateY(-2px);\n      box-shadow: \n        0 8px 20px rgba(0, 0, 0, 0.4),\n        inset 0 2px 4px rgba(255, 255, 255, 0.15);\n    }\n    \n    \/* 点击\/触摸反馈效果 *\/\n    .control-btn:active {\n      transform: scale(0.9) translateY(1px);\n      background: rgba(255, 255, 255, 0.3);\n      box-shadow: \n        0 2px 8px rgba(0, 0, 0, 0.2),\n        inset 0 1px 2px rgba(255, 255, 255, 0.2),\n        inset 0 0 10px rgba(255, 255, 255, 0.1);\n      transition: all 0.1s ease;\n    }\n    \n    \/* 移动设备专用样式 *\/\n    @media (hover: none) and (pointer: coarse) {\n      .control-btn {\n        \/* 增大触摸区域 *\/\n        width: 75px;\n        height: 75px;\n        font-size: 34px;\n        \/* 更明显的触摸反馈 *\/\n        transition: all 0.2s ease;\n      }\n      \n      .control-btn:active {\n        transform: scale(0.85) translateY(2px);\n        background: rgba(255, 255, 255, 0.35);\n        box-shadow: \n          0 1px 5px rgba(0, 0, 0, 0.3),\n          inset 0 2px 8px rgba(255, 255, 255, 0.25),\n          0 0 0 3px rgba(255, 255, 255, 0.1);\n      }\n      \n      \/* 移动设备上的按钮间距调整 *\/\n      .controls {\n        grid-template-columns: 75px 75px 75px;\n        grid-template-rows: 75px 75px 75px;\n        gap: 12px;\n      }\n    }\n    \n    .up-btn {\n      background: rgba(255, 215, 0, 0.25);\n      grid-column: 2;\n      grid-row: 1;\n    }\n    \n    .up-btn:active {\n      background: rgba(255, 215, 0, 0.4);\n      box-shadow: \n        0 2px 8px rgba(255, 215, 0, 0.3),\n        inset 0 1px 2px rgba(255, 255, 255, 0.2),\n        inset 0 0 10px rgba(255, 215, 0, 0.2);\n    }\n    \n    .left-btn {\n      background: rgba(255, 255, 255, 0.15);\n      grid-column: 1;\n      grid-row: 2;\n    }\n    \n    .left-btn:active {\n      background: rgba(255, 255, 255, 0.3);\n      box-shadow: \n        0 2px 8px rgba(255, 255, 255, 0.2),\n        inset 0 1px 2px rgba(255, 255, 255, 0.2),\n        inset 0 0 10px rgba(255, 255, 255, 0.1);\n    }\n    \n    .down-btn {\n      background: rgba(0, 191, 255, 0.25);\n      grid-column: 2;\n      grid-row: 2;\n    }\n    \n    .down-btn:active {\n      background: rgba(0, 191, 255, 0.4);\n      box-shadow: \n        0 2px 8px rgba(0, 191, 255, 0.3),\n        inset 0 1px 2px rgba(255, 255, 255, 0.2),\n        inset 0 0 10px rgba(0, 191, 255, 0.2);\n    }\n    \n    .right-btn {\n      background: rgba(255, 255, 255, 0.15);\n      grid-column: 3;\n      grid-row: 2;\n    }\n    \n    .right-btn:active {\n      background: rgba(255, 255, 255, 0.3);\n      box-shadow: \n        0 2px 8px rgba(255, 255, 255, 0.2),\n        inset 0 1px 2px rgba(255, 255, 255, 0.2),\n        inset 0 0 10px rgba(255, 255, 255, 0.1);\n    }\n    \n    \/* 触摸时的脉冲动画效果 *\/\n    @keyframes touchPulse {\n      0% {\n        box-shadow: \n          0 2px 8px rgba(0, 0, 0, 0.2),\n          inset 0 1px 2px rgba(255, 255, 255, 0.2),\n          0 0 0 0 rgba(255, 255, 255, 0.4);\n      }\n      50% {\n        box-shadow: \n          0 2px 8px rgba(0, 0, 0, 0.2),\n          inset 0 1px 2px rgba(255, 255, 255, 0.2),\n          0 0 0 8px rgba(255, 255, 255, 0.1);\n      }\n      100% {\n        box-shadow: \n          0 2px 8px rgba(0, 0, 0, 0.2),\n          inset 0 1px 2px rgba(255, 255, 255, 0.2),\n          0 0 0 0 rgba(255, 255, 255, 0);\n      }\n    }\n    \n    \/* 为按钮添加触摸时的脉冲效果类 *\/\n    .control-btn.touch-feedback {\n      animation: touchPulse 0.3s ease-out;\n    }\n    \n    .right-section {\n      display: flex;\n      flex-direction: column;\n      gap: 15px;\n      min-width: 120px;\n    }\n    \n    .info-box {\n      background: rgba(0, 0, 0, 0.5);\n      border-radius: 10px;\n      padding: 15px;\n      text-align: center;\n      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);\n    }\n    \n    .info-title {\n      font-size: 14px;\n      color: #a0a0a0;\n      margin-bottom: 8px;\n    }\n    \n    .info-value {\n      font-size: 24px;\n      font-weight: bold;\n      color: #fff;\n    }\n    \n    .food-container {\n      background: rgba(0, 0, 0, 0.6);\n      border-radius: 10px;\n      padding: 15px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);\n    }\n    \n    .food-title {\n      font-size: 14px;\n      color: #a0a0a0;\n      margin-bottom: 10px;\n      text-align: center;\n    }\n    \n    .food-icon {\n      font-size: 40px;\n      text-align: center;\n    }\n    \n    .game-over {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.85);\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      z-index: 20;\n      display: none;\n    }\n    \n    .game-over h2 {\n      font-size: 48px;\n      color: #ff4d4d;\n      margin-bottom: 30px;\n      text-shadow: 0 0 10px rgba(255, 77, 77, 0.5);\n    }\n    \n    .final-score {\n      font-size: 32px;\n      margin-bottom: 30px;\n    }\n    \n    .restart-btn {\n      padding: 18px 50px;\n      background: linear-gradient(to right, #ff416c, #ff4b2b);\n      border-radius: 30px;\n      font-size: 22px;\n      font-weight: bold;\n      color: white;\n      box-shadow: 0 8px 25px rgba(255, 75, 43, 0.4);\n      border: none;\n      cursor: pointer;\n    }\n    \n    \/* 背景动画 *\/\n    .background {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      overflow: hidden;\n      z-index: 1;\n    }\n    \n    .shape {\n      position: absolute;\n      background: rgba(255, 255, 255, 0.03);\n      border: 1px solid rgba(255, 255, 255, 0.05);\n      border-radius: 10px;\n      animation: float 15s infinite linear;\n    }\n    \n    @keyframes float {\n      0% {\n        transform: translateY(0) rotate(0deg);\n      }\n      100% {\n        transform: translateY(-100vh) rotate(360deg);\n      }\n    }\n  <\/style>\n<\/head>\n<body>\n  <div class=\"background\" id=\"background\"><\/div>\n  \n  <div class=\"game-container\">\n    <div class=\"main-content\">\n      <div class=\"left-section\">\n        <div class=\"game-board\">\n          <canvas id=\"snake\"><\/canvas>\n          <!-- 开始按钮覆盖层 -->\n          <div class=\"start-overlay\" id=\"startOverlay\">\n            <button class=\"start-btn\" id=\"startBtn\">开始游戏<\/button>\n          <\/div>\n        <\/div>\n      <\/div>\n      \n      <div class=\"right-section\">\n        <div class=\"info-box\">\n          <div class=\"info-title\">分数<\/div>\n          <div class=\"info-value\" id=\"score\">0<\/div>\n        <\/div>\n        \n        <div class=\"info-box\">\n          <div class=\"info-title\">最高分<\/div>\n          <div class=\"info-value\" id=\"highScore\">0<\/div>\n        <\/div>\n        \n        <div class=\"info-box\">\n          <div class=\"info-title\">长度<\/div>\n          <div class=\"info-value\" id=\"length\">3<\/div>\n        <\/div>\n        \n        <div class=\"food-container\">\n          <div>\n            <div class=\"food-title\">食物<\/div>\n            <div class=\"food-icon\" id=\"foodIcon\">🍎<\/div>\n          <\/div>\n        <\/div>\n      <\/div>\n    <\/div>\n    \n    <!-- 控制按钮改为十字形布局 -->\n    <div class=\"controls\">\n      <div class=\"control-btn up-btn\" id=\"upBtn\">↑<\/div>\n      <div class=\"control-btn left-btn\" id=\"leftBtn\">←<\/div>\n      <div class=\"control-btn right-btn\" id=\"rightBtn\">→<\/div>\n      <div class=\"control-btn down-btn\" id=\"downBtn\">↓<\/div>\n    <\/div>\n  <\/div>\n  \n  <div class=\"game-over\" id=\"gameOver\">\n    <h2>游戏结束!<\/h2>\n    <div class=\"final-score\">分数: <span id=\"finalScore\">0<\/span><\/div>\n    <button class=\"restart-btn\" id=\"restartBtn\">重新开始<\/button>\n  <\/div>\n\n  <script>\n    \/\/ 游戏常量 - 调整游戏区域尺寸（减少宽度3格，增加高度）\n    const COLS = 12;\n    const ROWS = 25;\n    const BLOCK_SIZE = 20;\n    \n    \/\/ 水果emoji数组\n    const FRUITS = ['🍎', '🍊', '🍌', '🍇', '🍓', '🥝', '🍑', '🍒', '🥭', '🍍', '🥥', '🍈', '🍉', '🍋', '🍐', '🥑'];\n    \n    \/\/ 方向常量\n    const DIRECTIONS = {\n      UP: { x: 0, y: -1 },\n      DOWN: { x: 0, y: 1 },\n      LEFT: { x: -1, y: 0 },\n      RIGHT: { x: 1, y: 0 }\n    };\n    \n    \/\/ 游戏变量\n    let canvas, ctx;\n    let snake = [];\n    let food = {};\n    let direction = DIRECTIONS.RIGHT;\n    let nextDirection = DIRECTIONS.RIGHT;\n    let score = 0;\n    let highScore = 0;\n    let gameOver = false;\n    let gameStarted = false;\n    let gameSpeed = 150; \/\/ 游戏速度（毫秒）\n    let lastTime = 0;\n    \n    \/\/ 初始化游戏\n    function init() {\n      createBackground();\n      \n      canvas = document.getElementById('snake');\n      ctx = canvas.getContext('2d');\n      \n      \/\/ 根据块大小计算画布大小\n      canvas.width = COLS * BLOCK_SIZE;\n      canvas.height = ROWS * BLOCK_SIZE;\n      \n      \/\/ 重置游戏状态\n      resetGame();\n      \n      \/\/ 加载最高分\n      loadHighScore();\n      \n      \/\/ 设置事件监听器\n      setupEventListeners();\n      \n      \/\/ 开始游戏循环\n      requestAnimationFrame(update);\n    }\n    \n    \/\/ 创建动态背景\n    function createBackground() {\n      const bg = document.getElementById('background');\n      const colors = ['rgba(255,255,255,0.05)', 'rgba(255,255,255,0.03)', 'rgba(255,255,255,0.02)'];\n      \n      for (let i = 0; i < 20; i++) {\n        const shape = document.createElement('div');\n        shape.classList.add('shape');\n        \n        \/\/ 随机大小\n        const size = Math.random() * 100 + 50;\n        shape.style.width = `${size}px`;\n        shape.style.height = `${size}px`;\n        \n        \/\/ 随机位置\n        shape.style.left = `${Math.random() * 100}%`;\n        shape.style.top = `${Math.random() * 100}%`;\n        \n        \/\/ 随机颜色\n        shape.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];\n        \n        \/\/ 随机动画\n        shape.style.animationDuration = `${Math.random() * 30 + 15}s`;\n        shape.style.animationDelay = `${Math.random() * 5}s`;\n        \n        bg.appendChild(shape);\n      }\n    }\n    \n    \/\/ 重置游戏\n    function resetGame() {\n      score = 0;\n      gameOver = false;\n      gameStarted = false;\n      direction = DIRECTIONS.RIGHT;\n      nextDirection = DIRECTIONS.RIGHT;\n      gameSpeed = 150;\n      \n      \/\/ 初始化蛇 - 从最左边开始，有3节（1个蛇头 + 2个蛇身）\n      const startY = Math.floor(ROWS \/ 2);\n      snake = [\n        { x: 2, y: startY }, \/\/ 蛇头（最右边）\n        { x: 1, y: startY }, \/\/ 蛇身1\n        { x: 0, y: startY }  \/\/ 蛇身2（最左边）\n      ];\n      \n      \/\/ 生成食物\n      generateFood();\n      \n      \/\/ 更新UI\n      updateUI();\n      \n      document.getElementById('gameOver').style.display = 'none';\n      document.getElementById('startOverlay').classList.remove('hidden');\n    }\n    \n    \/\/ 开始游戏\n    function startGame() {\n      gameStarted = true;\n      document.getElementById('startOverlay').classList.add('hidden');\n    }\n    \n    \/\/ 生成食物\n    function generateFood() {\n      do {\n        food = {\n          x: Math.floor(Math.random() * COLS),\n          y: Math.floor(Math.random() * ROWS),\n          emoji: FRUITS[Math.floor(Math.random() * FRUITS.length)]\n        };\n      } while (isSnakePosition(food.x, food.y));\n      \n      \/\/ 更新右侧显示的食物图标\n      document.getElementById('foodIcon').textContent = food.emoji;\n    }\n    \n    \/\/ 检查是否是蛇的位置\n    function isSnakePosition(x, y) {\n      return snake.some(segment => segment.x === x && segment.y === y);\n    }\n    \n    \/\/ 更新游戏状态\n    function update(currentTime) {\n      if (currentTime - lastTime > gameSpeed && gameStarted && !gameOver) {\n        direction = nextDirection;\n        moveSnake();\n        lastTime = currentTime;\n      }\n      \n      draw();\n      requestAnimationFrame(update);\n    }\n    \n    \/\/ 移动蛇\n    function moveSnake() {\n      const head = { ...snake[0] };\n      head.x += direction.x;\n      head.y += direction.y;\n      \n      \/\/ 检查边界碰撞\n      if (head.x < 0 || head.x >= COLS || head.y < 0 || head.y >= ROWS) {\n        endGame();\n        return;\n      }\n      \n      \/\/ 检查自身碰撞\n      if (isSnakePosition(head.x, head.y)) {\n        endGame();\n        return;\n      }\n      \n      snake.unshift(head);\n      \n      \/\/ 检查是否吃到食物\n      if (head.x === food.x && head.y === food.y) {\n        score += 10;\n        generateFood();\n        \n        \/\/ 增加游戏速度\n        if (gameSpeed > 80) {\n          gameSpeed -= 2;\n        }\n      } else {\n        snake.pop();\n      }\n      \n      updateUI();\n    }\n    \n    \/\/ 结束游戏\n    function endGame() {\n      gameOver = true;\n      gameStarted = false;\n      \n      \/\/ 更新最高分\n      if (score > highScore) {\n        highScore = score;\n        saveHighScore();\n      }\n      \n      document.getElementById('finalScore').textContent = score;\n      document.getElementById('gameOver').style.display = 'flex';\n    }\n    \n    \/\/ 绘制游戏\n    function draw() {\n      \/\/ 清空画布\n      ctx.fillStyle = 'rgba(10, 15, 40, 0.9)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      \n      \/\/ 绘制网格\n      drawGrid();\n      \n      \/\/ 绘制食物\n      drawFood();\n      \n      \/\/ 绘制蛇\n      drawSnake();\n    }\n    \n    \/\/ 绘制网格\n    function drawGrid() {\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.05)';\n      ctx.lineWidth = 0.5;\n      \n      for (let x = 0; x <= COLS; x++) {\n        ctx.beginPath();\n        ctx.moveTo(x * BLOCK_SIZE, 0);\n        ctx.lineTo(x * BLOCK_SIZE, ROWS * BLOCK_SIZE);\n        ctx.stroke();\n      }\n      \n      for (let y = 0; y <= ROWS; y++) {\n        ctx.beginPath();\n        ctx.moveTo(0, y * BLOCK_SIZE);\n        ctx.lineTo(COLS * BLOCK_SIZE, y * BLOCK_SIZE);\n        ctx.stroke();\n      }\n    }\n    \n    \/\/ 绘制蛇\n    function drawSnake() {\n      snake.forEach((segment, index) => {\n        const x = segment.x * BLOCK_SIZE;\n        const y = segment.y * BLOCK_SIZE;\n        \n        if (index === 0) {\n          \/\/ 蛇头 - 红色\n          ctx.fillStyle = '#FF4444';\n          ctx.fillRect(x, y, BLOCK_SIZE - 1, BLOCK_SIZE - 1);\n          \n          \/\/ 蛇头高光\n          ctx.fillStyle = 'rgba(255, 255, 255, 0.4)';\n          ctx.fillRect(x, y, BLOCK_SIZE - 1, BLOCK_SIZE \/ 4);\n          ctx.fillRect(x, y, BLOCK_SIZE \/ 4, BLOCK_SIZE - 1);\n        } else {\n          \/\/ 蛇身 - 绿色\n          ctx.fillStyle = '#32CD32';\n          ctx.fillRect(x, y, BLOCK_SIZE - 1, BLOCK_SIZE - 1);\n          \n          \/\/ 蛇身高光\n          ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';\n          ctx.fillRect(x, y, BLOCK_SIZE - 1, BLOCK_SIZE \/ 6);\n          ctx.fillRect(x, y, BLOCK_SIZE \/ 6, BLOCK_SIZE - 1);\n        }\n        \n        \/\/ 阴影\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.3)';\n        ctx.fillRect(\n          x + BLOCK_SIZE - BLOCK_SIZE \/ 6,\n          y + BLOCK_SIZE \/ 6,\n          BLOCK_SIZE \/ 6,\n          BLOCK_SIZE - BLOCK_SIZE \/ 6\n        );\n        ctx.fillRect(\n          x + BLOCK_SIZE \/ 6,\n          y + BLOCK_SIZE - BLOCK_SIZE \/ 6,\n          BLOCK_SIZE - BLOCK_SIZE \/ 6,\n          BLOCK_SIZE \/ 6\n        );\n      });\n    }\n    \n    \/\/ 绘制食物\n    function drawFood() {\n      const x = food.x * BLOCK_SIZE;\n      const y = food.y * BLOCK_SIZE;\n      \n      \/\/ 绘制emoji食物\n      ctx.font = `${BLOCK_SIZE - 2}px Arial`;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(\n        food.emoji, \n        x + BLOCK_SIZE \/ 2, \n        y + BLOCK_SIZE \/ 2\n      );\n    }\n    \n    \/\/ 更新UI\n    function updateUI() {\n      document.getElementById('score').textContent = score;\n      document.getElementById('highScore').textContent = highScore;\n      document.getElementById('length').textContent = snake.length;\n    }\n    \n    \/\/ 改变方向\n    function changeDirection(newDirection) {\n      if (!gameStarted || gameOver) return;\n      \n      \/\/ 防止反向移动\n      if (\n        (direction === DIRECTIONS.UP && newDirection === DIRECTIONS.DOWN) ||\n        (direction === DIRECTIONS.DOWN && newDirection === DIRECTIONS.UP) ||\n        (direction === DIRECTIONS.LEFT && newDirection === DIRECTIONS.RIGHT) ||\n        (direction === DIRECTIONS.RIGHT && newDirection === DIRECTIONS.LEFT)\n      ) {\n        return;\n      }\n      \n      nextDirection = newDirection;\n    }\n    \n    \/\/ 添加触摸反馈效果\n    function addTouchFeedback(element) {\n      element.classList.add('touch-feedback');\n      setTimeout(() => {\n        element.classList.remove('touch-feedback');\n      }, 300);\n    }\n    \n    \/\/ 设置事件监听器\n    function setupEventListeners() {\n      \/\/ 开始按钮\n      document.getElementById('startBtn').addEventListener('click', startGame);\n      \n      \/\/ 重新开始按钮\n      document.getElementById('restartBtn').addEventListener('click', resetGame);\n      \n      \/\/ 控制按钮 - 添加触摸反馈\n      const upBtn = document.getElementById('upBtn');\n      const downBtn = document.getElementById('downBtn');\n      const leftBtn = document.getElementById('leftBtn');\n      const rightBtn = document.getElementById('rightBtn');\n      \n      \/\/ 上方向按钮\n      upBtn.addEventListener('click', () => {\n        changeDirection(DIRECTIONS.UP);\n        addTouchFeedback(upBtn);\n      });\n      \n      upBtn.addEventListener('touchstart', (e) => {\n        e.preventDefault();\n        changeDirection(DIRECTIONS.UP);\n        addTouchFeedback(upBtn);\n      });\n      \n      \/\/ 下方向按钮\n      downBtn.addEventListener('click', () => {\n        changeDirection(DIRECTIONS.DOWN);\n        addTouchFeedback(downBtn);\n      });\n      \n      downBtn.addEventListener('touchstart', (e) => {\n        e.preventDefault();\n        changeDirection(DIRECTIONS.DOWN);\n        addTouchFeedback(downBtn);\n      });\n      \n      \/\/ 左方向按钮\n      leftBtn.addEventListener('click', () => {\n        changeDirection(DIRECTIONS.LEFT);\n        addTouchFeedback(leftBtn);\n      });\n      \n      leftBtn.addEventListener('touchstart', (e) => {\n        e.preventDefault();\n        changeDirection(DIRECTIONS.LEFT);\n        addTouchFeedback(leftBtn);\n      });\n      \n      \/\/ 右方向按钮\n      rightBtn.addEventListener('click', () => {\n        changeDirection(DIRECTIONS.RIGHT);\n        addTouchFeedback(rightBtn);\n      });\n      \n      rightBtn.addEventListener('touchstart', (e) => {\n        e.preventDefault();\n        changeDirection(DIRECTIONS.RIGHT);\n        addTouchFeedback(rightBtn);\n      });\n      \n      \/\/ 键盘控制\n      document.addEventListener('keydown', (e) => {\n        switch (e.key) {\n          case 'ArrowUp':\n          case 'w':\n          case 'W':\n            e.preventDefault();\n            changeDirection(DIRECTIONS.UP);\n            break;\n          case 'ArrowDown':\n          case 's':\n          case 'S':\n            e.preventDefault();\n            changeDirection(DIRECTIONS.DOWN);\n            break;\n          case 'ArrowLeft':\n          case 'a':\n          case 'A':\n            e.preventDefault();\n            changeDirection(DIRECTIONS.LEFT);\n            break;\n          case 'ArrowRight':\n          case 'd':\n          case 'D':\n            e.preventDefault();\n            changeDirection(DIRECTIONS.RIGHT);\n            break;\n          case ' ':\n            e.preventDefault();\n            if (!gameStarted && !gameOver) {\n              startGame();\n            }\n            break;\n        }\n      });\n      \n      \/\/ 触摸控制\n      let touchStartX = 0;\n      let touchStartY = 0;\n      \n      canvas.addEventListener('touchstart', (e) => {\n        e.preventDefault();\n        const touch = e.touches[0];\n        touchStartX = touch.clientX;\n        touchStartY = touch.clientY;\n      });\n      \n      canvas.addEventListener('touchend', (e) => {\n        e.preventDefault();\n        if (!gameStarted || gameOver) return;\n        \n        const touch = e.changedTouches[0];\n        const deltaX = touch.clientX - touchStartX;\n        const deltaY = touch.clientY - touchStartY;\n        const minSwipeDistance = 30;\n        \n        if (Math.abs(deltaX) > Math.abs(deltaY)) {\n          \/\/ 水平滑动\n          if (Math.abs(deltaX) > minSwipeDistance) {\n            if (deltaX > 0) {\n              changeDirection(DIRECTIONS.RIGHT);\n            } else {\n              changeDirection(DIRECTIONS.LEFT);\n            }\n          }\n        } else {\n          \/\/ 垂直滑动\n          if (Math.abs(deltaY) > minSwipeDistance) {\n            if (deltaY > 0) {\n              changeDirection(DIRECTIONS.DOWN);\n            } else {\n              changeDirection(DIRECTIONS.UP);\n            }\n          }\n        }\n      });\n    }\n    \n    \/\/ 保存最高分\n    function saveHighScore() {\n      localStorage.setItem('snakeHighScore', highScore.toString());\n    }\n    \n    \/\/ 加载最高分\n    function loadHighScore() {\n      const saved = localStorage.getItem('snakeHighScore');\n      if (saved) {\n        highScore = parseInt(saved);\n        document.getElementById('highScore').textContent = highScore;\n      }\n    }\n    \n    \/\/ 页面加载完成后初始化游戏\n    window.addEventListener('load', init);\n  <\/script>\n<\/body>\n<\/html>",
    "name" : "贪食蛇",
    "version" : 1,
    "type" : "game",
    "id" : "f09b11fc42bc6264",
    "isPinned" : true,
    "createdAt" : "2025-07-29T14:44:27Z",
    "updatedAt" : "2025-08-02T12:20:18Z"
  }
]