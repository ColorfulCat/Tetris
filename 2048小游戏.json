[
  {
    "icon" : "gamecontroller",
    "desc" : "经典的2048小游戏",
    "color" : "yellow",
    "html" : "<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n  <title>2048<\/title>\n  <style>\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n      touch-action: manipulation;\n      user-select: none;\n    }\n    \n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      background: linear-gradient(135deg, #1a2a6c, #b21f1f, #1a2a6c);\n      height: 100vh;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      color: white;\n      overflow: hidden;\n      position: relative;\n    }\n    \n    .game-container {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 20px;\n      position: relative;\n      z-index: 10;\n    }\n    \n    .score-section {\n      display: flex;\n      gap: 30px;\n      align-items: center;\n      margin-bottom: 10px;\n    }\n    \n    .score-box {\n      background: rgba(0, 0, 0, 0.6);\n      border-radius: 15px;\n      padding: 15px 25px;\n      text-align: center;\n      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);\n      min-width: 120px;\n    }\n    \n    .score-title {\n      font-size: 14px;\n      color: #a0a0a0;\n      margin-bottom: 8px;\n      text-transform: uppercase;\n      letter-spacing: 1px;\n    }\n    \n    .score-value {\n      font-size: 28px;\n      font-weight: bold;\n      color: #fff;\n    }\n    \n    .game-board {\n      background: rgba(0, 0, 0, 0.6);\n      border-radius: 15px;\n      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);\n      padding: 15px;\n      position: relative;\n    }\n    \n    #game2048 {\n      width: 400px;\n      height: 400px;\n      background: rgba(187, 173, 160, 0.4);\n      border-radius: 8px;\n      position: relative;\n      display: grid;\n      grid-template-columns: repeat(4, 1fr);\n      grid-template-rows: repeat(4, 1fr);\n      gap: 10px;\n      padding: 10px;\n    }\n    \n    .grid-cell {\n      background: rgba(238, 228, 218, 0.35);\n      border-radius: 6px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      font-size: 32px;\n      font-weight: bold;\n      transition: all 0.15s ease-in-out;\n      position: relative;\n    }\n    \n    .tile {\n      position: absolute;\n      width: 90px;\n      height: 90px;\n      border-radius: 6px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      font-size: 32px;\n      font-weight: bold;\n      transition: all 0.15s ease-in-out;\n      z-index: 2;\n    }\n    \n    .tile-2 { background: #eee4da; color: #776e65; }\n    .tile-4 { background: #ede0c8; color: #776e65; }\n    .tile-8 { background: #f2b179; color: #f9f6f2; }\n    .tile-16 { background: #f59563; color: #f9f6f2; }\n    .tile-32 { background: #f67c5f; color: #f9f6f2; }\n    .tile-64 { background: #f65e3b; color: #f9f6f2; }\n    .tile-128 { background: #edcf72; color: #f9f6f2; font-size: 28px; }\n    .tile-256 { background: #edcc61; color: #f9f6f2; font-size: 28px; }\n    .tile-512 { background: #edc850; color: #f9f6f2; font-size: 28px; }\n    .tile-1024 { background: #edc53f; color: #f9f6f2; font-size: 24px; }\n    .tile-2048 { background: #edc22e; color: #f9f6f2; font-size: 24px; box-shadow: 0 0 30px 10px rgba(243, 215, 116, 0.55); }\n    \n    .tile-new {\n      animation: appear 0.2s ease-in-out;\n    }\n    \n    @keyframes appear {\n      0% {\n        opacity: 0;\n        transform: scale(0);\n      }\n      100% {\n        opacity: 1;\n        transform: scale(1);\n      }\n    }\n    \n    .new-game-btn {\n      padding: 15px 40px;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      border-radius: 25px;\n      font-size: 18px;\n      font-weight: bold;\n      color: white;\n      text-align: center;\n      box-shadow: \n        0 8px 25px rgba(102, 126, 234, 0.4),\n        inset 0 2px 4px rgba(255, 255, 255, 0.2);\n      transition: all 0.3s ease;\n      border: none;\n      cursor: pointer;\n      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n      position: relative;\n      overflow: hidden;\n      text-transform: uppercase;\n      letter-spacing: 1px;\n    }\n    \n    .new-game-btn::before {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: -100%;\n      width: 100%;\n      height: 100%;\n      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n      transition: left 0.5s;\n    }\n    \n    .new-game-btn:hover {\n      transform: translateY(-3px);\n      box-shadow: \n        0 12px 35px rgba(102, 126, 234, 0.6),\n        inset 0 2px 4px rgba(255, 255, 255, 0.3);\n      background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);\n    }\n    \n    .new-game-btn:hover::before {\n      left: 100%;\n    }\n    \n    .new-game-btn:active {\n      transform: translateY(-1px) scale(0.98);\n      box-shadow: \n        0 6px 20px rgba(102, 126, 234, 0.4),\n        inset 0 1px 2px rgba(255, 255, 255, 0.1);\n    }\n    \n    .game-over {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.85);\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      z-index: 20;\n      display: none;\n    }\n    \n    .game-over h2 {\n      font-size: 48px;\n      color: #ff4d4d;\n      margin-bottom: 30px;\n      text-shadow: 0 0 10px rgba(255, 77, 77, 0.5);\n    }\n    \n    .game-win {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.85);\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      z-index: 20;\n      display: none;\n    }\n    \n    .game-win h2 {\n      font-size: 48px;\n      color: #50C878;\n      margin-bottom: 30px;\n      text-shadow: 0 0 10px rgba(80, 200, 120, 0.5);\n    }\n    \n    .final-score {\n      font-size: 32px;\n      margin-bottom: 30px;\n    }\n    \n    .restart-btn {\n      padding: 18px 50px;\n      background: linear-gradient(to right, #ff416c, #ff4b2b);\n      border-radius: 30px;\n      font-size: 22px;\n      font-weight: bold;\n      color: white;\n      box-shadow: 0 8px 25px rgba(255, 75, 43, 0.4);\n      border: none;\n      cursor: pointer;\n    }\n    \n    .continue-btn {\n      padding: 18px 50px;\n      background: linear-gradient(to right, #50C878, #32CD32);\n      border-radius: 30px;\n      font-size: 22px;\n      font-weight: bold;\n      color: white;\n      box-shadow: 0 8px 25px rgba(80, 200, 120, 0.4);\n      border: none;\n      cursor: pointer;\n      margin-right: 20px;\n    }\n    \n    \/* 背景动画 *\/\n    .background {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      overflow: hidden;\n      z-index: 1;\n    }\n    \n    .shape {\n      position: absolute;\n      background: rgba(255, 255, 255, 0.03);\n      border: 1px solid rgba(255, 255, 255, 0.05);\n      border-radius: 10px;\n      animation: float 15s infinite linear;\n    }\n    \n    @keyframes float {\n      0% {\n        transform: translateY(0) rotate(0deg);\n      }\n      100% {\n        transform: translateY(-100vh) rotate(360deg);\n      }\n    }\n  <\/style>\n<\/head>\n<body>\n  <div class=\"background\" id=\"background\"><\/div>\n  \n  <div class=\"game-container\">\n    <!-- 分数区域移到顶部 -->\n    <div class=\"score-section\">\n      <div class=\"score-box\">\n        <div class=\"score-title\">分数<\/div>\n        <div class=\"score-value\" id=\"score\">0<\/div>\n      <\/div>\n      \n      <div class=\"score-box\">\n        <div class=\"score-title\">最高分<\/div>\n        <div class=\"score-value\" id=\"highScore\">0<\/div>\n      <\/div>\n    <\/div>\n    \n    <!-- 游戏面板 -->\n    <div class=\"game-board\">\n      <div id=\"game2048\">\n        <!-- 网格单元格 -->\n        <div class=\"grid-cell\"><\/div>\n        <div class=\"grid-cell\"><\/div>\n        <div class=\"grid-cell\"><\/div>\n        <div class=\"grid-cell\"><\/div>\n        <div class=\"grid-cell\"><\/div>\n        <div class=\"grid-cell\"><\/div>\n        <div class=\"grid-cell\"><\/div>\n        <div class=\"grid-cell\"><\/div>\n        <div class=\"grid-cell\"><\/div>\n        <div class=\"grid-cell\"><\/div>\n        <div class=\"grid-cell\"><\/div>\n        <div class=\"grid-cell\"><\/div>\n        <div class=\"grid-cell\"><\/div>\n        <div class=\"grid-cell\"><\/div>\n        <div class=\"grid-cell\"><\/div>\n        <div class=\"grid-cell\"><\/div>\n      <\/div>\n    <\/div>\n    \n    <!-- 新游戏按钮 -->\n    <button class=\"new-game-btn\" id=\"newGameBtn\">新游戏<\/button>\n  <\/div>\n  \n  <div class=\"game-over\" id=\"gameOver\">\n    <h2>游戏结束!<\/h2>\n    <div class=\"final-score\">分数: <span id=\"finalScore\">0<\/span><\/div>\n    <button class=\"restart-btn\" id=\"restartBtn\">重新开始<\/button>\n  <\/div>\n  \n  <div class=\"game-win\" id=\"gameWin\">\n    <h2>恭喜！你赢了！<\/h2>\n    <div class=\"final-score\">分数: <span id=\"winScore\">0<\/span><\/div>\n    <div>\n      <button class=\"continue-btn\" id=\"continueBtn\">继续游戏<\/button>\n      <button class=\"restart-btn\" id=\"restartWinBtn\">重新开始<\/button>\n    <\/div>\n  <\/div>\n\n  <script>\n    \/\/ 游戏状态\n    let board = [];\n    let score = 0;\n    let highScore = 0;\n    let gameWon = false;\n    let gameEnded = false;\n    \n    \/\/ 触摸相关变量\n    let startX = 0;\n    let startY = 0;\n    let endX = 0;\n    let endY = 0;\n    \n    \/\/ 初始化游戏\n    function init() {\n      createBackground();\n      loadHighScore();\n      setupEventListeners();\n      newGame();\n    }\n    \n    \/\/ 创建动态背景\n    function createBackground() {\n      const bg = document.getElementById('background');\n      const colors = ['rgba(255,255,255,0.05)', 'rgba(255,255,255,0.03)', 'rgba(255,255,255,0.02)'];\n      \n      for (let i = 0; i < 20; i++) {\n        const shape = document.createElement('div');\n        shape.classList.add('shape');\n        \n        \/\/ 随机大小\n        const size = Math.random() * 100 + 50;\n        shape.style.width = `${size}px`;\n        shape.style.height = `${size}px`;\n        \n        \/\/ 随机位置\n        shape.style.left = `${Math.random() * 100}%`;\n        shape.style.top = `${Math.random() * 100}%`;\n        \n        \/\/ 随机颜色\n        shape.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];\n        \n        \/\/ 随机动画\n        shape.style.animationDuration = `${Math.random() * 30 + 15}s`;\n        shape.style.animationDelay = `${Math.random() * 5}s`;\n        \n        bg.appendChild(shape);\n      }\n    }\n    \n    \/\/ 设置事件监听器\n    function setupEventListeners() {\n      \/\/ 键盘事件\n      document.addEventListener('keydown', handleKeyPress);\n      \n      \/\/ 触摸事件\n      const gameBoard = document.getElementById('game2048');\n      gameBoard.addEventListener('touchstart', handleTouchStart, { passive: false });\n      gameBoard.addEventListener('touchend', handleTouchEnd, { passive: false });\n      \n      \/\/ 鼠标事件（用于桌面测试）\n      gameBoard.addEventListener('mousedown', handleMouseStart);\n      gameBoard.addEventListener('mouseup', handleMouseEnd);\n      \n      \/\/ 按钮事件\n      document.getElementById('newGameBtn').addEventListener('click', newGame);\n      document.getElementById('restartBtn').addEventListener('click', newGame);\n      document.getElementById('restartWinBtn').addEventListener('click', newGame);\n      document.getElementById('continueBtn').addEventListener('click', continueGame);\n    }\n    \n    \/\/ 新游戏\n    function newGame() {\n      board = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n      ];\n      score = 0;\n      gameWon = false;\n      gameEnded = false;\n      \n      document.getElementById('score').textContent = score;\n      document.getElementById('gameOver').style.display = 'none';\n      document.getElementById('gameWin').style.display = 'none';\n      \n      \/\/ 添加两个初始方块\n      addRandomTile();\n      addRandomTile();\n      \n      updateDisplay();\n    }\n    \n    \/\/ 继续游戏\n    function continueGame() {\n      document.getElementById('gameWin').style.display = 'none';\n    }\n    \n    \/\/ 添加随机方块\n    function addRandomTile() {\n      const emptyCells = [];\n      \n      for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n          if (board[i][j] === 0) {\n            emptyCells.push({row: i, col: j});\n          }\n        }\n      }\n      \n      if (emptyCells.length > 0) {\n        const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        board[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n      }\n    }\n    \n    \/\/ 更新显示\n    function updateDisplay() {\n      const gameBoard = document.getElementById('game2048');\n      \n      \/\/ 清除现有的方块\n      const existingTiles = gameBoard.querySelectorAll('.tile');\n      existingTiles.forEach(tile => tile.remove());\n      \n      \/\/ 添加新的方块\n      for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n          if (board[i][j] !== 0) {\n            const tile = document.createElement('div');\n            tile.className = `tile tile-${board[i][j]}`;\n            tile.textContent = board[i][j];\n            \n            \/\/ 精确计算位置，确保与网格对齐\n            \/\/ 游戏板总宽度400px，内边距10px，所以内容区域380px\n            \/\/ 4个格子 + 3个间隙(10px) = 380px\n            \/\/ 每个格子宽度 = (380 - 30) \/ 4 = 87.5px\n            const cellSize = 87.5; \/\/ 每个格子87.5px\n            const gap = 10; \/\/ 间隙10px\n            const padding = 10; \/\/ 内边距10px\n            \n            tile.style.left = `${padding + j * (cellSize + gap)}px`;\n            tile.style.top = `${padding + i * (cellSize + gap)}px`;\n            \n            gameBoard.appendChild(tile);\n            \n            \/\/ 添加出现动画\n            setTimeout(() => {\n              tile.classList.add('tile-new');\n            }, 10);\n          }\n        }\n      }\n      \n      \/\/ 更新分数\n      document.getElementById('score').textContent = score;\n      \n      \/\/ 检查并更新最高分\n      if (score > highScore) {\n        highScore = score;\n        document.getElementById('highScore').textContent = highScore;\n        saveHighScore();\n      }\n      \n      \/\/ 检查游戏状态\n      checkGameState();\n    }\n    \n    \/\/ 检查游戏状态\n    function checkGameState() {\n      \/\/ 检查是否达到2048\n      if (!gameWon) {\n        for (let i = 0; i < 4; i++) {\n          for (let j = 0; j < 4; j++) {\n            if (board[i][j] === 2048) {\n              gameWon = true;\n              document.getElementById('winScore').textContent = score;\n              document.getElementById('gameWin').style.display = 'flex';\n              return;\n            }\n          }\n        }\n      }\n      \n      \/\/ 检查是否游戏结束\n      if (isGameOver()) {\n        gameEnded = true;\n        document.getElementById('finalScore').textContent = score;\n        document.getElementById('gameOver').style.display = 'flex';\n      }\n    }\n    \n    \/\/ 检查游戏是否结束\n    function isGameOver() {\n      \/\/ 检查是否有空格\n      for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n          if (board[i][j] === 0) {\n            return false;\n          }\n        }\n      }\n      \n      \/\/ 检查是否可以合并\n      for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n          if (j < 3 && board[i][j] === board[i][j + 1]) {\n            return false;\n          }\n          if (i < 3 && board[i][j] === board[i + 1][j]) {\n            return false;\n          }\n        }\n      }\n      \n      return true;\n    }\n    \n    \/\/ 键盘事件处理\n    function handleKeyPress(event) {\n      if (gameEnded) return;\n      \n      switch (event.key) {\n        case 'ArrowUp':\n          event.preventDefault();\n          move('up');\n          break;\n        case 'ArrowDown':\n          event.preventDefault();\n          move('down');\n          break;\n        case 'ArrowLeft':\n          event.preventDefault();\n          move('left');\n          break;\n        case 'ArrowRight':\n          event.preventDefault();\n          move('right');\n          break;\n      }\n    }\n    \n    \/\/ 触摸开始\n    function handleTouchStart(event) {\n      event.preventDefault();\n      const touch = event.touches[0];\n      startX = touch.clientX;\n      startY = touch.clientY;\n    }\n    \n    \/\/ 触摸结束\n    function handleTouchEnd(event) {\n      event.preventDefault();\n      if (gameEnded) return;\n      \n      const touch = event.changedTouches[0];\n      endX = touch.clientX;\n      endY = touch.clientY;\n      \n      const deltaX = endX - startX;\n      const deltaY = endY - startY;\n      const minSwipeDistance = 30;\n      \n      if (Math.abs(deltaX) > Math.abs(deltaY)) {\n        \/\/ 水平滑动\n        if (Math.abs(deltaX) > minSwipeDistance) {\n          if (deltaX > 0) {\n            move('right');\n          } else {\n            move('left');\n          }\n        }\n      } else {\n        \/\/ 垂直滑动\n        if (Math.abs(deltaY) > minSwipeDistance) {\n          if (deltaY > 0) {\n            move('down');\n          } else {\n            move('up');\n          }\n        }\n      }\n    }\n    \n    \/\/ 鼠标事件（用于桌面测试）\n    function handleMouseStart(event) {\n      startX = event.clientX;\n      startY = event.clientY;\n    }\n    \n    function handleMouseEnd(event) {\n      if (gameEnded) return;\n      \n      endX = event.clientX;\n      endY = event.clientY;\n      \n      const deltaX = endX - startX;\n      const deltaY = endY - startY;\n      const minSwipeDistance = 30;\n      \n      if (Math.abs(deltaX) > Math.abs(deltaY)) {\n        if (Math.abs(deltaX) > minSwipeDistance) {\n          if (deltaX > 0) {\n            move('right');\n          } else {\n            move('left');\n          }\n        }\n      } else {\n        if (Math.abs(deltaY) > minSwipeDistance) {\n          if (deltaY > 0) {\n            move('down');\n          } else {\n            move('up');\n          }\n        }\n      }\n    }\n    \n    \/\/ 移动方块\n    function move(direction) {\n      const previousBoard = board.map(row => [...row]);\n      let moved = false;\n      \n      switch (direction) {\n        case 'left':\n          moved = moveLeft();\n          break;\n        case 'right':\n          moved = moveRight();\n          break;\n        case 'up':\n          moved = moveUp();\n          break;\n        case 'down':\n          moved = moveDown();\n          break;\n      }\n      \n      if (moved) {\n        addRandomTile();\n        updateDisplay();\n      }\n    }\n    \n    \/\/ 向左移动\n    function moveLeft() {\n      let moved = false;\n      \n      for (let i = 0; i < 4; i++) {\n        const row = board[i].filter(val => val !== 0);\n        \n        \/\/ 合并相同的数字\n        for (let j = 0; j < row.length - 1; j++) {\n          if (row[j] === row[j + 1]) {\n            row[j] *= 2;\n            score += row[j];\n            row.splice(j + 1, 1);\n          }\n        }\n        \n        \/\/ 填充空格\n        while (row.length < 4) {\n          row.push(0);\n        }\n        \n        \/\/ 检查是否有变化\n        for (let j = 0; j < 4; j++) {\n          if (board[i][j] !== row[j]) {\n            moved = true;\n          }\n          board[i][j] = row[j];\n        }\n      }\n      \n      return moved;\n    }\n    \n    \/\/ 向右移动\n    function moveRight() {\n      let moved = false;\n      \n      for (let i = 0; i < 4; i++) {\n        const row = board[i].filter(val => val !== 0);\n        \n        \/\/ 合并相同的数字（从右到左）\n        for (let j = row.length - 1; j > 0; j--) {\n          if (row[j] === row[j - 1]) {\n            row[j] *= 2;\n            score += row[j];\n            row.splice(j - 1, 1);\n            j--;\n          }\n        }\n        \n        \/\/ 填充空格\n        while (row.length < 4) {\n          row.unshift(0);\n        }\n        \n        \/\/ 检查是否有变化\n        for (let j = 0; j < 4; j++) {\n          if (board[i][j] !== row[j]) {\n            moved = true;\n          }\n          board[i][j] = row[j];\n        }\n      }\n      \n      return moved;\n    }\n    \n    \/\/ 向上移动\n    function moveUp() {\n      let moved = false;\n      \n      for (let j = 0; j < 4; j++) {\n        const column = [];\n        for (let i = 0; i < 4; i++) {\n          if (board[i][j] !== 0) {\n            column.push(board[i][j]);\n          }\n        }\n        \n        \/\/ 合并相同的数字\n        for (let i = 0; i < column.length - 1; i++) {\n          if (column[i] === column[i + 1]) {\n            column[i] *= 2;\n            score += column[i];\n            column.splice(i + 1, 1);\n          }\n        }\n        \n        \/\/ 填充空格\n        while (column.length < 4) {\n          column.push(0);\n        }\n        \n        \/\/ 检查是否有变化\n        for (let i = 0; i < 4; i++) {\n          if (board[i][j] !== column[i]) {\n            moved = true;\n          }\n          board[i][j] = column[i];\n        }\n      }\n      \n      return moved;\n    }\n    \n    \/\/ 向下移动\n    function moveDown() {\n      let moved = false;\n      \n      for (let j = 0; j < 4; j++) {\n        const column = [];\n        for (let i = 0; i < 4; i++) {\n          if (board[i][j] !== 0) {\n            column.push(board[i][j]);\n          }\n        }\n        \n        \/\/ 合并相同的数字（从下到上）\n        for (let i = column.length - 1; i > 0; i--) {\n          if (column[i] === column[i - 1]) {\n            column[i] *= 2;\n            score += column[i];\n            column.splice(i - 1, 1);\n            i--;\n          }\n        }\n        \n        \/\/ 填充空格\n        while (column.length < 4) {\n          column.unshift(0);\n        }\n        \n        \/\/ 检查是否有变化\n        for (let i = 0; i < 4; i++) {\n          if (board[i][j] !== column[i]) {\n            moved = true;\n          }\n          board[i][j] = column[i];\n        }\n      }\n      \n      return moved;\n    }\n    \n    \/\/ 保存最高分\n    function saveHighScore() {\n      localStorage.setItem('2048-highScore', highScore.toString());\n    }\n    \n    \/\/ 加载最高分\n    function loadHighScore() {\n      const saved = localStorage.getItem('2048-highScore');\n      if (saved) {\n        highScore = parseInt(saved);\n        document.getElementById('highScore').textContent = highScore;\n      } else {\n        \/\/ 如果没有保存的最高分，设置为0\n        highScore = 0;\n        document.getElementById('highScore').textContent = highScore;\n      }\n    }\n    \n    \/\/ 初始化游戏\n    init();\n  <\/script>\n<\/body>\n<\/html>",
    "name" : "2048小游戏",
    "version" : 1,
    "type" : "game",
    "id" : "e458541c5066e1a9",
    "isPinned" : true,
    "createdAt" : "2025-07-29T16:46:14Z",
    "updatedAt" : "2025-08-02T12:20:18Z"
  }
]